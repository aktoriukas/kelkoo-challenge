{"ast":null,"code":"import _toConsumableArray from\"/home/aktoriukas/Documents/projects/kelisto-challenge/challenge/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/aktoriukas/Documents/projects/kelisto-challenge/challenge/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// COLOURS ============================\nimport React,{useState}from'react';import data from'./data/products.json';import Card from'./components/Card';import Button from'./components/Button';import Basket from'./components/Basket';import Img from'./img/sales.jpg';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Shop(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),basket=_useState2[0],setBasket=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),itemsCount=_useState4[0],setItemsCount=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),basketItems=_useState6[0],setBasketItems=_useState6[1];var addItem=function addItem(item){var _item$count;item.count=(_item$count=item.count)!==null&&_item$count!==void 0?_item$count:1;if(item.count===0){item.count=1;}setItemsCount(itemsCount+1);//check for dublicates\nfor(var i=0;i<basketItems.length;i++){if(basketItems[i].productId===item.productId){var itemsCopy=_toConsumableArray(basketItems);itemsCopy[i].count++;setBasketItems(itemsCopy);return;}}setBasketItems([].concat(_toConsumableArray(basketItems),[item]));};var removeItem=function removeItem(id){//check for dublicates\nfor(var i=0;i<basketItems.length;i++){if(basketItems[i].productId===id){var itemsCopy=_toConsumableArray(basketItems);itemsCopy[i].count--;setItemsCount(itemsCount-1);//remove with 0 quantity\nif(itemsCopy[i].count===0){setBasketItems(itemsCopy.filter(function(item){return item.productId!==id;}));return;}setBasketItems(itemsCopy);return;}}};var cards=data.map(function(card){return/*#__PURE__*/_jsx(Card,{addItem:addItem,card:card},card.productId);});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"logo\",children:\"SHOP\"}),/*#__PURE__*/_jsx(Button,{class:\"basket\",click:function click(){return setBasket(!basket);},txt:\"show basket (\".concat(!itemsCount?'empty':itemsCount,\")\")}),basket?/*#__PURE__*/_jsx(Basket,{removeItem:removeItem,setBasket:setBasket,items:basketItems}):'']}),/*#__PURE__*/_jsx(\"div\",{className:\"products grid\",children:cards}),/*#__PURE__*/_jsx(\"div\",{className:\"background\",children:/*#__PURE__*/_jsx(\"img\",{src:Img,alt:\"background\"})})]});}","map":{"version":3,"sources":["/home/aktoriukas/Documents/projects/kelisto-challenge/challenge/src/Shop.js"],"names":["React","useState","data","Card","Button","Basket","Img","Shop","props","basket","setBasket","itemsCount","setItemsCount","basketItems","setBasketItems","addItem","item","count","i","length","productId","itemsCopy","removeItem","id","filter","cards","map","card"],"mappings":"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","sourcesContent":["// COLOURS ============================\nimport React, { useState } from 'react'\n\nimport data from './data/products.json'\nimport Card from './components/Card'\nimport Button from './components/Button'\nimport Basket from './components/Basket'\n\nimport Img from './img/sales.jpg'\n\nexport default function Shop(props) {\n\n    const [basket, setBasket] = useState(false)\n    const [itemsCount, setItemsCount] = useState(0)\n    const [basketItems, setBasketItems] = useState([])\n\n    const addItem = (item) => {\n        item.count = item.count ?? 1\n        if (item.count === 0) { item.count = 1 }\n        setItemsCount(itemsCount + 1)\n\n        //check for dublicates\n\n        for (let i = 0; i < basketItems.length; i++) {\n            if (basketItems[i].productId === item.productId) {\n                let itemsCopy = [...basketItems]\n                itemsCopy[i].count++\n                setBasketItems(itemsCopy)\n                return\n            }\n        }\n        setBasketItems([...basketItems, item])\n    }\n\n    const removeItem = id => {\n\n        //check for dublicates\n\n        for (let i = 0; i < basketItems.length; i++) {\n            if (basketItems[i].productId === id) {\n                let itemsCopy = [...basketItems]\n                itemsCopy[i].count--\n                setItemsCount(itemsCount - 1)\n\n                //remove with 0 quantity\n\n                if (itemsCopy[i].count === 0) {\n                    setBasketItems(itemsCopy.filter(item => item.productId !== id))\n                    return\n                }\n                setBasketItems(itemsCopy)\n                return\n            }\n        }\n    }\n\n    let cards = data.map(card => (\n        <Card addItem={addItem} key={card.productId} card={card} />\n    ))\n\n    return (\n        <>\n\n            <header className='header'>\n                <h1 className='logo'>SHOP</h1>\n                <Button\n                    class='basket'\n                    click={() => setBasket(!basket)}\n                    txt={`show basket (${!itemsCount ? 'empty' : itemsCount})`} />\n\n                {basket ?\n                    <Basket\n                        removeItem={removeItem}\n                        setBasket={setBasket}\n                        items={basketItems} />\n                    :\n                    ''\n                }\n            </header>\n\n            <div className='products grid'>\n                {cards}\n            </div>\n            <div className='background'>\n                <img src={Img} alt='background' />\n            </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}